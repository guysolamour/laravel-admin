<?php

namespace {{namespace}};

use Illuminate\Notifications\Notifiable;
use Creativeorange\Gravatar\Facades\Gravatar;
use Illuminate\Foundation\Auth\User as Authenticatable;
use {{namespace}}\Notifications\{{backNamespace}}\Auth\VerifyEmail;
use {{namespace}}\Notifications\{{backNamespace}}\Auth\ResetPassword;

class {{singularClass}} extends Authenticatable
{
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'pseudo', 'first_name', 'last_name', 'email', 'password','avatar','is_super_{{singularSlug}}',
        'facebook', 'twitter','phone_number','website','about'
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'is_super_{{singularSlug}}' => 'boolean'
    ];

    /**
     * Send the password reset notification.
     *
     * @param  string  $token
     * @return void
     */
    public function sendPasswordResetNotification($token)
    {
        $this->notify(new ResetPassword($token));
    }

    /**
     * Send the email verification notification.
     *
     * @return void
     */
    public function sendEmailVerificationNotification()
    {
        $this->notify(new VerifyEmail);
    }

    public function isSuper{{singularClass}}(  ) :bool
    {
        return  $this->is_super_{{singularSlug}};
    }

    /**
     * Get the admin's full name.
     *
     * @return string
     */
    public function getFullNameAttribute() :string
    {
        return "{$this->first_name} {$this->last_name}";
    }

    /**
     * Get the admin's role.
     *
     * @return string
     */
    public function getRoleAttribute() :string
    {
        return $this->is_super_admin ? 'Super administrateur' : 'Administrateur';
    }


    /**
     * Set the avatar with gravatar service before saving and updating
     *
     * @param  mixed $value
     *
     * @return void
     */
    public function setAvatarAttribute($value)
    {
        $this->attributes['avatar'] = is_null($value) ? Gravatar::get($this->attributes['email']) : $value;
    }

    public function setPasswordAttribute($value)
    {
        $this->attributes['password'] = bcrypt($value);
    }

    /**
    * @param string $email
    *
    * @return \Illuminate\Database\Eloquent\Model|null|static
    */
    public static function findByEmail($email)
    {
      return static::where('email', $email)->first();
    }

    public function getRouteKeyName()
    {
      return 'pseudo';
    }

}
