<?php

namespace {{namespace}}\Traits;

use Illuminate\Support\Arr;
use Spatie\MediaLibrary\InteractsWithMedia;
use Creativeorange\Gravatar\Facades\Gravatar;
use Spatie\MediaLibrary\MediaCollections\Models\Media;


trait MediaableTrait
{
    use InteractsWithMedia;


    public function getFrontImageAttribute()
    {
        return $this->getMedia(config('media-library.collections.front.label'), ['select' => true])->first();
    }

    public function getFrontImageUrl() :?string
    {
        $media = $this->front_image;

        if (!$media && $this->email) {
            return Gravatar::get($this->email);
        }

        return $media ? $media->getUrl() : null;
    }

    public function getBackImageAttribute()
    {
        return $this->getMedia(config('media-library.collections.back.label'), ['select' => true])->first();
    }


    public function getImagesAttribute()
    {
        $medias = $this->getMedia(config('media-library.collections.images.label'), ['select' => true]);

        return $this->sortImages($medias);
    }


    public function registerMediaCollections(Media $media = null): void
    {

        $collections = $this->getMediaCollections();

        foreach ($collections  as $collection) {
            $media = $this->addMediaCollection($collection['label'])
                ->useDisk(
                    config('media-library.collections_disc')
                );

            if ($collection['conversion']) {
                $media->withResponsiveImages();
            }
        }
    }

  /**
     * @param Media $media
     * @return void
     */
  public function registerMediaConversions(Media $media = null): void
  {

      $conversions = $this->getMediaConversions();

      foreach ($conversions as $key =>  $conversion) {
          $media_conversion = $this->addMediaConversion($key);

          if (Arr::exists($conversion, 'height')  && Arr::get($conversion, 'height')){
              $media_conversion->height($conversion['height']);
          }

          if (Arr::exists($conversion, 'width')  && Arr::get($conversion, 'width')){
              $media_conversion->width($conversion['width']);
          }
      }
    }

    /**
     *
     * @param \Illuminate\Support\Collection $medias
     * @param string $sort_key
     * @return void
     */
    public function sortImages($medias, string $sort_key = 'order')
    {
        return $medias->sortBy(function ($media, $key) use($sort_key) {
            return $media->getCustomProperty($sort_key);
        })->values()->all();
    }


    public static function bootMediaableTrait()
    {

        /**
         * @param \{{namespace}}\{{modelsFolder}}\BaseModel $model
         */
        static::created(function ($model) {

            $collections = $model->getMediaCollections();

            if ($collections) {
                foreach ($collections  as $collection) {

                    if (
                        'front-image' === $collection['label'] ||
                        'back-image'  === $collection['label'] ||
                        'images'      === $collection['label']
                    ) {
                        if (request($collection)) {
                            self::saveImages($model, request($collection['label']), $collection['label']);
                        }
                    }
                }
            }
        });
    }

    /**
     * @param  \{{namespace}}\{{modelsFolder}}\BaseModel $model
     * @param array $images
     * @return void
     */
    private static function saveImages($model, $images, string $collection)
    {
        $attributes = self::getCollectionAttributes(request($collection . '-attributes'));

        foreach ($images as $image) {
            $attr = $attributes[$image->getClientOriginalName()];
            $model->addMedia($image)
                ->setName($attr['name'])
                ->withCustomProperties([
                    'order' => $attr['order'],
                    'select' => $attr['select'],
                ])
                ->toMediaCollection($collection)
                ;
        }
    }

    /**
     *
     * @param string $attributes
     * @return array
     */
    private static function getCollectionAttributes($attributes) :array
    {
        $attr = [];
        foreach (json_decode($attributes,true) as $attribute) {
            foreach ($attribute as $key => $value) {
                $attr[$key] = $value;
            }
        }
        return $attr;

    }
}
