<?php

namespace {{namespace}}\Traits;

use Kris\LaravelFormBuilder\FormBuilderTrait as FormBuilder;


trait FormBuilderTrait
{
    use FormBuilder;

    /**
     *
     * @param mixed|null $model
     *
     * @param null $form
     * @param bool $withModel
     *
     * @param bool $withNamespace
     *
     * @return \Kris\LaravelFormBuilder\Form
     */
    protected function getForm($model = null, $form = null, bool $withModel = true, bool $withNamespace = true)
    {

        $form = $form ?: $this->getFormName($withNamespace);
        $modelName = $this->getModelClassName();


        if ($withModel) {
            $model = $model ?: new $modelName();
            return $this->form($form, [
                'model' => $model
            ]);
        }

        return $this->form($form, []);
    }

    /**
     * @param bool $withNamespace
     *
     * @return string
     */
    private function getModelClassName(): string
    {
        $model = $this->getModelName(true);

        $parts = explode('\\', $model);

        $parts_count = count($parts);

        // we have a sub namespace folder
        if ($parts_count > 2) {
            // get the two element of the array
            $model_name = $parts[$parts_count - 2] . '\\' .  $parts[$parts_count - 1];
        } else {
            $model_name = last($parts);
        }

        return sprintf("{{namespace}}\{{modelsFolder}}\%s", $model_name);
    }

    /**
     * @param bool $withNamespace
     *
     * @return string
     */
    private function getModelName(bool $withNamespace = true): string
    {
        $controller = last(explode('Controllers\\', get_called_class()));

        $modelNamespace = head(explode('Controller', $controller));


        if ($withNamespace) {
            return $modelNamespace;
        } else {
            return last(explode('\\', $modelNamespace));
        }

    }


    /**
     * @param bool $withNamespace
     *
     * @return string
     */
    private function getFormName(bool $withNamespace = true): string
    {
        return sprintf("{{namespace}}\Forms\%sForm", $this->getModelName($withNamespace));
    }
}
