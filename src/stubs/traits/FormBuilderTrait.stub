<?php

namespace {{namespace}}\Traits;

use Illuminate\Support\Str;
use Kris\LaravelFormBuilder\Form;
use Illuminate\Database\Eloquent\Model;
use Kris\LaravelFormBuilder\FormBuilderTrait as FormBuilder;


trait FormBuilderTrait
{
    use FormBuilder;

    protected function getForm(?Model $model = null, ?string $form = null, bool $withModel = true, bool $withNamespace = true) :Form
    {
        $form ??= $this->getFormName($withNamespace);

        $options = [];

        if ($withModel) {
            if (!$model){
                $modelName = $this->getModelClassName();
                $model     = new $modelName();
            }

            $options['model'] = $model;
        }

        return $this->form($form, $options);
    }

    private function getModelClassName(): string
    {
        $model = $this->getModelName(true);

        return sprintf("{{namespace}}\{{modelsFolder}}\%s", $model);
    }

    /**
     * Get controller without {{namespace}}\Http\Controllers
     *
     * @return string
     */
    private function getControllerWithoutPrefixNamespace() :string
    {
        return  Str::afterLast(get_called_class(), 'Controllers\\');
    }

    private function getModelWithFullNamespace(string $class_name) :string
    {
        return Str::after(Str::beforeLast($class_name, 'Controller'), '\\');
    }

    private function getModelWithoutNamespace(string $model) :string
    {
        return Str::afterLast($model, '\\');
    }


    private function getModelName(bool $withNamespace = true): string
    {
        $controller = $this->getControllerWithoutPrefixNamespace();
        $modelWithNamespace = $this->getModelWithFullNamespace($controller);

        if ($withNamespace){
            return $modelWithNamespace;
        }

        return $this->getModelWithoutNamespace($modelWithNamespace);
    }


    private function getFormName(bool $withNamespace = true): string
    {
        return sprintf(
            "{{namespace}}\Forms\{{backNamespace}}\%sForm", $this->getModelName($withNamespace)
        );
    }
}
