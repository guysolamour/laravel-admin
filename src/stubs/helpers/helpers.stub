<?php

use Illuminate\Support\Str;



if (!function_exists('get_month')) {
    function get_month(\Carbon\Carbon $date, bool $longFormat = false)
    {

        $date_fr = ['Janvier','Fevrier','Mars','Avril','Mai','Juin','Juillet',
            'Août','Septembre','Octobre','Novembre','Décembre'];
        return !$longFormat ? Str::limit($date_fr[$date->format('n') - 1],3,'') : $date_fr[$date->format('n') - 1];

    }
}

if (!function_exists('configuration')) {
    function configuration(?string $attribute = null, string $default = null)
    {
        $configuration = \{{namespace}}\Settings\ConfigurationSettings::get();

        if (is_null($attribute)){
            return $configuration;
        }

        if (property_exists($configuration, $attribute)) {
            $default = $configuration->$attribute;
        }

        return $default;
    }
}

if (!function_exists('get_meta_page')) {
    function get_meta_page(string $name)
    {
        return \{{namespace}}\{{modelsFolder}}\Page::firstWhere('code', $name);
    }
}

if (!function_exists('get_meta_tag')) {
    function get_meta_tag(string $page_name, string $code, ?string $key = null)
    {
        $page = get_meta_page($page_name);

        if (!$page) return;

        return $page->getTag($code, $key);
    }
}
if (!function_exists('get_meta_type')) {
    function get_meta_type(int $id) :string
    {
        $types = \{{namespace}}\{{modelsFolder}}\PageMeta::TYPES;

        foreach ($types as $key => $type) {
            if ($type['value'] === $id) {
                return $key;
            }
        }
        return '';
    }
}


if (!function_exists('isConceptor{{singularClass}}')) {
    function isConceptor{{singularClass}}(\{{namespace}}\{{modelsFolder}}\{{singularClass}} ${{singularSlug}}) :bool
    {
        return ${{singularSlug}}->isConceptor{{singularClass}}();
    }

}


if (!function_exists('get_current_month')) {
    function get_current_month(bool $longFormat = false)
    {
        $date = now();

        $date_fr = ['Janvier','Fevrier','Mars','Avril','Mai','Juin','Juillet',
            'Août','Septembre','Octobre','Novembre','Décembre'];
        return !$longFormat ? Str::limit($date_fr[$date->format('n') - 1],3,'') : $date_fr[$date->format('n') - 1];

    }
}



if (!function_exists('get_day')) {
    function get_day(\Carbon\Carbon $date)
    {
        $date_fr = ['Lundi','Mardi','Mercredi','Jeudi','Vendredi','Samedi','Dimanche'];
        return $date_fr[$date->format('N') - 1];

    }
}

if (!function_exists('get_full_date')) {
    function get_full_date(?\Carbon\Carbon $date = null) :string
    {
        // Jeudi 30 Octobre 2018

        $date = is_null($date) ? now() : $date;
        $day = get_day($date);
        $day_int = $date->format('d');
        $month = get_month($date,true);
        $year = $date->format('Y');

        return sprintf('%s %d %s %d',$day,$day_int,$month,$year);
    }
}


if (!function_exists('format_price')) {
    /**
     * @param string $price
     * @param string $suffix
     * @return string
     */
    function format_price($price, string $suffix = "FCFA")
    {
        return number_format($price, 0, ',', ' ') . " " . $suffix;
    }
}

if (!function_exists('format_date')) {
    /**
     * @param \Carbon\Carbon $date
     * @param null|string $format
     * @return string
     */
    function format_date(\Carbon\Carbon $date, ?string $format = null)
    {
        $format ??= config('administrable.format_date', 'd/m/Y H:i');

        return $date->format($format);
    }
}



if (!function_exists('set_active_link')) {
    function set_active_link(...$routes)
    {
        foreach ($routes as $route) {
            if (\Illuminate\Support\Facades\Route::is($route)) return 'active';
        }
        return '';
    }
}



if (!function_exists('get_{{singularSlug}}')) {
   /**
     * @param string|null $field
     * @return \{{namespace}}\{{modelsFolder}}\{{singularClass}}|mixed
     */
    function get_{{singularSlug}}(?string $field = null) {
        if ( is_null( $field ) ) {
            return auth('{{singularSlug}}')->user();
        }

        return auth('{{singularSlug}}')->user()->$field;
    }

}

if (!function_exists('get_user')) {
   /**
     * @param string|null $field
     * @return \{{namespace}}\{{modelsFolder}}\User|mixed
     */
    function get_user(?string $field = null) {
        if ( is_null( $field ) ) {
            return auth()->user();
        }

        return auth()->user()->$field;
    }

}

if (!function_exists('current_{{singularSlug}}_is_super_{{singularSlug}}')) {
    function current_{{singularSlug}}_is_super_{{singularSlug}}() : bool
    {
        return (bool) get_{{singularSlug}}( 'is_super_{{singularSlug}}' );
    }
}

if (!function_exists('current_{{singularSlug}}_profil')) {
    function current_{{singularSlug}}_profil(${{singularSlug}}) : bool
    {
        return get_{{singularSlug}}('id') == ${{singularSlug}}->id;
    }
}

if (!function_exists('get_{{singularSlug}}_role')) {
    function get_{{singularSlug}}_role(${{singularSlug}}) : string
    {
        return ${{singularSlug}}->isSuper{{singularClass}}() ? 'Super {{singularSlug}}' : '{{singularClass}}';
    }
}

if (!function_exists('get_current_{{singularSlug}}_role')) {
    function get_current_{{singularSlug}}_role() : string
    {
        return get_{{singularSlug}}_role(get_{{singularSlug}}());
    }
}

