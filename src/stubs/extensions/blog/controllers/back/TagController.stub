<?php

namespace {{namespace}}\Http\Controllers\{{backNamespace}}\{{extensionsFolderClass}}\{{extensionClass}};

use {{namespace}}\{{modelsFolder}}\{{extensionsFolderClass}}\{{extensionClass}}\Tag;
use Illuminate\Http\Request;
use {{namespace}}\Traits\FormBuilderTrait;
use {{namespace}}\Http\Controllers\Controller;
use {{namespace}}\Forms\{{backNamespace}}\{{extensionsFolderClass}}\{{extensionClass}}\TagForm;


class TagController extends Controller
{
    use FormBuilderTrait;

     /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $tags = Tag::last()->get();

        return view('{{backLowerNamespace}}.{{extensionsFolder}}.{{extensionSingularSlug}}.tags.index', compact('tags'));
    }



    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $form = $this->getForm(new Tag, TagForm::class);

        return view('{{backLowerNamespace}}.{{extensionsFolder}}.{{extensionSingularSlug}}.tags.create',compact('form'));
    }




    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
       $form = $this->getForm(new Tag, TagForm::class);
       $form->redirectIfNotValid();

       Tag::create($request->all());

       flashy('L\' élément a bien été ajouté');

       return redirect()->route('{{backLowerNamespace}}.{{extensionsFolder}}.{{extensionSingularSlug}}.tag.index');
    }





    /**
     * Display the specified resource.
     *
     * @param  \{{namespace}}\{{modelsFolder}}\{{extensionsFolderClass}}\{{extensionClass}}\Tag  $tag
     * @return \Illuminate\Http\Response
     */
    public function show(Tag $tag)
    {
       return view('{{backLowerNamespace}}.{{extensionsFolder}}.{{extensionSingularSlug}}.tags.show', compact('tag'));
    }



      /**
     * Show the form for editing the specified resource.
     *
     * @param  \{{namespace}}\{{modelsFolder}}\{{extensionsFolderClass}}\{{extensionClass}}\Tag  $tag
     * @return \Illuminate\Http\Response
     */
    public function edit(Tag $tag)
    {
        $form = $this->getForm($tag, TagForm::class);

        return view('{{backLowerNamespace}}.{{extensionsFolder}}.{{extensionSingularSlug}}.tags.edit', compact('tag','form'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \{{namespace}}\{{modelsFolder}}\{{extensionsFolderClass}}\{{extensionClass}}\Tag  $tag
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Tag $tag)
    {
        $form = $this->getForm($tag, TagForm::class);
        $form->redirectIfNotValid();
        $tag->update($request->all());

        flashy('L\' élément a bien été modifié');

        return redirect()->route('{{backLowerNamespace}}.{{extensionsFolder}}.{{extensionSingularSlug}}.tag.index');
    }


    /**
     * Remove the specified resource from storage.
     *
     * @param  \{{namespace}}\{{modelsFolder}}\{{extensionsFolderClass}}\{{extensionClass}}\Tag  $tag
     * @return \Illuminate\Http\Response
     */
    public function destroy(Tag $tag)
    {
        $tag->delete();

        flashy('L\' élément a bien été supprimé');

        return redirect()->route('{{backLowerNamespace}}.{{extensionsFolder}}.{{extensionSingularSlug}}.tag.index');
    }

}
