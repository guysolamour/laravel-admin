<?php

namespace {{namespace}}\{{modelsFolder}}\{{extensionsFolderClass}}\{{extensionClass}};

use {{namespace}}\{{modelsFolder}}\{{singularClass}};
use {{namespace}}\Traits\SeoableTrait;
use {{namespace}}\{{modelsFolder}}\BaseModel;
use {{namespace}}\Traits\CommentableTrait;
use {{namespace}}\Traits\DaterangeTrait;
use Cviebrock\EloquentSluggable\Sluggable;

class Post extends BaseModel
{
    use Sluggable, SeoableTrait, CommentableTrait, DaterangeTrait;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['title', 'content', 'author_id', 'slug', 'online', 'allow_comment'];

    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = '{{extensionsFolder}}_{{extensionSingularSlug}}_posts';

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'online'        => 'boolean',
        'allow_comment' => 'boolean'
    ];

    protected $datepickers = [
        'created_at'
    ];


    // Attributes

    public function getPreviousAttribute()
    {
        return self::where('id', '<', $this->getKey())->orderByDesc('id')->first();
    }

    public function getNextAttribute()
    {
        return self::where('id', '>', $this->getKey())->orderBy('id')->first();
    }


    // add relation methods below

    public function categories()
    {
        return $this->belongsToMany(Category::class, '{{extensionsFolder}}_{{extensionSingularSlug}}_post_category');
    }


    public function tags()
    {
        return $this->belongsToMany(Tag::class, '{{extensionsFolder}}_{{extensionSingularSlug}}_post_tag');
    }


    public function author()
    {
        return $this->belongsTo({{singularClass}}::class, 'author_id');
    }



    // relation a mettre si post doit etre creer


    // add sluggable methods below

    public function getRouteKeyName()
    {
        return 'slug';
    }

    /**
     * Return the sluggable configuration array for this model.
     *
     * @return array
     */
    public function sluggable(): array
    {
        return [
            'slug' => ['source' => 'title']
        ];
    }

    public static function booted()
    {
        parent::booted();

        /**
         * @param \{{namespace}}\{{modelsFolder}}\BaseModel $model
         */
        static::saved(function ($model) {
            $model->saveCategories();
            $model->saveTags();
        });
    }

    public function saveCategories() :void
    {
        if ($categories = request('categories')) {
            $this->categories()->sync($categories);
        }

    }

    public function saveTags() :void
    {
        if ($tags = request('tags')) {
            $this->tags()->sync($tags);
        }
    }
}
