<?php

namespace {{namespace}}\Http\Controllers\{{backNamespace}};

use {{namespace}}\{{modelsFolder}}\Comment;
use Illuminate\Http\Request;
use {{namespace}}\Traits\FormBuilderTrait;
use {{namespace}}\Http\Controllers\Controller;
use {{namespace}}\Mail\{{frontNamespace}}\ReplyCommentMail;
use Illuminate\Support\Facades\Mail;

class CommentController extends Controller
{
    use FormBuilderTrait;

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $comments = Comment::last()->get();

        return view('{{backLowerNamespace}}.comments.index', compact('comments'));
    }


    /**
     * Display the specified resource.
     *
     * @param  \{{namespace}}\{{modelsFolder}}\Comment  $comment
     * @return \Illuminate\Http\Response
     */
    public function show(Comment $comment)
    {
        return view('{{backLowerNamespace}}.comments.show', compact('comment'));
    }

     /**
     * @param Comment $comment
     * @param Request $request
     */
    public function reply(Comment $comment, Request $request)
    {
        $request->validate([
            'comment'  => 'required',
            'child_id' => 'required',
        ]);


        $reply                   = new Comment;
        $reply->comment          = $request->get('comment');
        $reply->child_id         = $request->get('child_id');
        $reply->commentable_id   = $comment->commentable_id;
        $reply->commentable_type = $comment->commentable_type;


        if ( $request->get('guest_name') === get_{{singularSlug}}('full_name') && $request->get('guest_email') === get_{{singularSlug}}('email')){
            $reply->commenter_id    = get_{{singularSlug}}('id');
            $reply->commenter_type  = get_class(get_{{singularSlug}}());
        }else {
            $reply->guest_name    = $request->get('guest_name');
            $reply->guest_email   = $request->get('guest_email');
        }

        $reply->save();

        // check if  reply notification and send notifcation
        if ($comment->reply_notification && $comment->getCommenterEmail() != $reply->getCommenterEmail()) {
            Mail::to($comment->getCommenterEmail())->send(new ReplyCommentMail($comment));
        }

        flashy('Votre réponse a bien été ajoutée. Ce dernière sera affichée dès lors qu\'ells sera aprouvée. ');
        return back();
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \{{namespace}}\{{modelsFolder}}\Comment  $post
     * @return \Illuminate\Http\Response
     */
    public function edit(Comment $comment)
    {
        $form = $this->getForm($comment);
        return view('{{backLowerNamespace}}.comments.edit', compact('comment', 'form'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \{{namespace}}\{{modelsFolder}}\Comment  $comment
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Comment $comment)
    {
        $form = $this->getForm($comment);
        $form->redirectIfNotValid();

        $comment->update($request->all());

        flashy('Le commentaire a bien été modifié');
        return redirect()->route('{{backLowerNamespace}}.comment.index');
    }

    /**
     * Approved the comments.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \{{namespace}}\{{modelsFolder}}\Comment  $comment
     * @return \Illuminate\Http\Response
     */
    public function approved(Request $request, Comment $comment)
    {
        $comment->approved();

        flashy('Le commentaire a bien été approuvé.');
        return back();
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \{{namespace}}\{{modelsFolder}}\Comment  $comment
     * @return \Illuminate\Http\Response
     */
    public function destroy(Comment $comment)
    {
        $comment->delete();

        flashy('Le commentaire a bien été supprimé');
        return redirect()->route('{{backLowerNamespace}}.comment.index');
    }

}
