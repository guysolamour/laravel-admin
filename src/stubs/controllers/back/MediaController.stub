<?php

namespace {{namespace}}\Http\Controllers\{{backNamespace}};

use Illuminate\Support\Str;
use Illuminate\Http\Request;
use {{namespace}}\{{modelsFolder}}\BaseModel;
use {{namespace}}\{{modelsFolder}}\Media;
use {{namespace}}\Http\Controllers\Controller;

class MediaController extends Controller
{

    public function index(string $model, int $id, string $collection)
    {
        $model = base64_decode($model)::find($id);
        $medias = $model->getMedia($collection);

        $ordered = $medias->sortBy(function ($media, $key) {
            return $media->getCustomProperty('order');
        });

        return $ordered->values()->all();
    }

    public function tinymce(string $model, int $id, Request $request)
    {

        if (!$id) {
            $model =  base64_decode($model);
            $model = new $model;
        } else {
            $model = base64_decode($model)::find($id);
        }

        return view('{{backLowerNamespace}}.media.tinymce', [
            'model' => $model,
            'model_name' => get_class($model),
            'form_name' => $model->form_name,
            'prefix'    => config('administrable.auth_prefix_path')
        ]);
    }

    public function store(string $model, int $id, Request $request)
    {
         /**
         * @var BaseModel $model
         */

        $model = base64_decode($model)::find($id);

        $media = $model->addMediaFromRequest('image');

        $media->sanitizingFileName(function($fileName){
            return str_replace(["'", " "], '', $fileName);
        });
        $media->withCustomProperties([
            'order' => (int) $request->get('order'),
            'select' => false,
        ]);

        $media = $media->toMediaCollection($request->collection);

        return response()->json(['media' => $media,'success' => 'Le média a bien été ajouté']);

    }

    public function rename (Media $media, Request $request)
    {
        $media->name = $request->get('name');
        $media->save();

        return response()->json(['media' => $media, 'success' => 'Le média a bien été renommé']);
    }

    public function select(Media $media)
    {
        $model = $media->model;


        $collection_name = $this->getCurrentCollectionName($media);

        $collection = $model->getMediaCollections()[$collection_name];

        if (!$collection['multiple']) {
            $medias = $model->getMedia($media->collection_name);
            $medias->each->select(false);
        }

        $media->select();

        return response()->json(['media' => $media, 'success' => 'Le média a bien été sélectionné']);
    }

    public function unselect (Media $media)
    {
        $media->unSelect();

        return response()->json(['media' => $media, 'success' => 'Le média a bien été désélectionné']);
    }


    public function order(Request $request)
    {
        foreach( $request->get('ids') as $value ){
            Media::findOrFail($value['id'])
                ->setCustomProperty('order', $value['order'])
                ->save() ;
        }

        return response()->json(['success' => 'Les médias ont bien été réorganisés']);
    }


    public function destroy(string $model, int $id, Request $request)
    {

        base64_decode($model)::find($id)->deleteMedia( $request->get('image_id') );

        return response()->json(['success' => 'Le média a bien été retiré']);
    }


    public function destroySeo(string $model, int $id, Request $request)
    {
        /**
         * @var BaseModel $model
         */
        $model = base64_decode($model)::findOrFail($id);
        $key = $request->get('field');
        $collection = config('media-library.collections.seo');

        $model->getMedia($collection, ['field' => "$collection.{$key}" ])->each->delete();

        // Seo
        $model->seo()->update([$key => null]);
        $model->generateSeo(false);

        return response()->json(['success' => 'Le média a bien été retiré']);
    }



    public function destroyAll(string $model, int $id, string $collection)
    {

        $model = base64_decode($model)::find($id);
        $medias = $model->getMedia($collection);

        $medias->each->delete();

        return response()->json(['success' => 'Les médias ont bien été retirés']);
    }

    private function getCurrentCollectionName(Media $media) :string
    {
        $name = $media->collection_name;

        // remove suffix image to front and back collection
        if (Str::contains($name, '-')) {
            $name = Str::before($name, '-');
        }

        return $name;
    }

}
