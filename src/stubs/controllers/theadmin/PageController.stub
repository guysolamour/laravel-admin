<?php

namespace {{namespace}}\Http\Controllers\{{backNamespace}};

use {{namespace}}\{{modelsFolder}}\Page;
use {{namespace}}\{{modelsFolder}}\PageMeta;
use Illuminate\Http\Request;
use {{namespace}}\Traits\FormBuilderTrait;
use {{namespace}}\Http\Controllers\Controller;

class PageController extends Controller
{
    use FormBuilderTrait;

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $pages = Page::last()->get();

        return view('{{backLowerNamespace}}.pages.index', compact('pages'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        abort_unless(get_{{singularSlug}}()->isConceptor{{singularClass}}(), 401);

        $form = $this->getForm();

        return view('{{backLowerNamespace}}.pages.create', compact('form'));
    }


    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        abort_unless(get_{{singularSlug}}()->isConceptor{{singularClass}}(), 401);

        $form = $this->getForm();
        $form->redirectIfNotValid();

        Page::create($request->all());

        flashy('L\' élément a bien été ajouté');
        return redirect()->route('{{backLowerNamespace}}.page.index');
    }

    /**
     * Display the specified resource.
     *
     * @param \{{namespace}}\{{modelsFolder}}\Page  $page
     * @return \Illuminate\Http\Response
     */
    public function show(Page $page)
    {
        $page->load('metatags');

        return view('{{backLowerNamespace}}.pages.show', compact('page'));
    }

    /**
     * Show the form for editing a new resource.
     *
     * @param  \{{namespace}}\{{modelsFolder}}\Page  $page
     * @return \Illuminate\Http\Response
     */
    public function edit(Page $page)
    {
        $form = $this->getForm($page);

        return view('{{backLowerNamespace}}.pages.edit', compact('page', 'form'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \{{namespace}}\{{modelsFolder}}\Page  $page
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, Page $page)
    {
        $form = $this->getForm($page);
        $form->redirectIfNotValid();

        $page->update($request->all());


        flashy('L\' élément a bien été modifié');
        return redirect()->route('{{backLowerNamespace}}.page.show', $page);
    }


    /**
     * Remove the specified resource from storage.
     *
     * @param  \{{namespace}}\{{modelsFolder}}\Page  $page
     * @return \Illuminate\Http\Response
     */
    public function destroy(Page $page)
    {
        abort_unless(get_{{singularSlug}}()->isConceptor{{singularClass}}(), 401);

        $page->delete();
        flashy('L\' élément a bien été supprimé');
        return redirect()->route('{{backLowerNamespace}}.page.index');
    }


    public function storeMetaTag(Page $page, Request $request)
    {

        $request->validate($this->getValidationRules());

        $pagemeta = $page->metatags()->create([
            'code'    => $request->get('code'),
            'name'    => $request->get('name'),
            'title'   => $request->get('title'),
            'type'    => $request->get('type'),
            'content' => $this->getContentFieldValue($request)
        ]);

        $this->saveImage($pagemeta, $request);


        flashy('Le meta tag a bien été inseré');
        return back();
    }

    /**
     *
     * @param  \Illuminate\Http\Request $request
     * @return string|null
     */
    private function getContentFieldValue($request): ?string
    {
        $types = \{{namespace}}\{{modelsFolder}}\PageMeta::TYPES;

        foreach ($types as $key => $type) {
            if ($request->get('type') == $type['value']) {
                return $request->get("{$key}content");
            }
        }
        return null;
    }


    public function updateMetaTag(Page $page, PageMeta $pagemeta, Request $request)
    {

        $request->validate($this->getValidationRules());

        $pagemeta->update([
            'name'    => $request->get('name'),
            'title'   => $request->get('title'),
            'content' => $request->get('textcontent') ?? $request->get('videocontent')
        ]);
        $this->saveImage($pagemeta, $request);


        flashy('Le meta tag a bien été modifié');
        return back();
    }

    public function deleteMetaTag(Page $page, PageMeta $pagemeta, Request $request)
    {

        abort_unless(get_{{singularSlug}}()->isConceptor{{singularClass}}(), 401);

        $pagemeta->delete();

        flashy('Le meta tag a bien été supprimé');
        return back();
    }

    private function getValidationRules(): array
    {
        $rules =  [
            'code'     => 'required',
            'name'     => 'required',
            'title'    => 'nullable',
            'content'  => 'nullable',
            'type'     => 'required',
            'page_id'  => 'required|exists:\{{namespace}}\{{modelsFolder}}\Page,id',
        ];

        if ('image' === get_meta_type(request('type'))) {
            $rules['imagecontent'] = 'required|image';
        }

        return $rules;
    }

    private function saveImage($pagemeta, $request)
    {
        if ($request->file('imagecontent') && $pagemeta->isImage()) {
            $media = $pagemeta->addMediaFromRequest('imagecontent')->toMediaCollection(config('media-library.collections.front.label'));
            $pagemeta->update(['content' => $media->getUrl()]);
        }
    }
}
