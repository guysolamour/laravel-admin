<?php

namespace {{namespace}}\Http\Controllers\{{backNamespace}};

use Illuminate\Http\Request;
use {{namespace}}\Traits\FormBuilderTrait;
use {{namespace}}\Http\Controllers\Controller;
use {{namespace}}\{{modelsFolder}}\User;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Validator;


class UserController extends Controller
{
    use FormBuilderTrait;

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $users = User::latest()->get();
        $form = $this->getForm();

        return view('{{backLowerNamespace}}.users.index', compact('users','form'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $form = $this->getForm();
        return view('{{backLowerNamespace}}.users.create', compact('form'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $form = $this->getForm();

        $form->redirectIfNotValid();

        User::create([
            'name'              => $request->get('name'),
            'pseudo'            => $request->get('pseudo'),
            'email'             => $request->get('email'),
            'email_verified_at' => now(),
            'remember_token'    => Str::random(10),
        ]);

        flashy('L\' utilisateur a bien été ajouté');
        return redirect()->route('{{backLowerNamespace}}.user.index');
    }

    /**
     * Display the specified resource.
     *
     * @param  \{{namespace}}\{{modelsFolder}}\User  $user
     * @return \Illuminate\Http\Response
     */
    public function show(User $user)
    {
        return view('{{backLowerNamespace}}.users.show', compact('user'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \{{namespace}}\{{modelsFolder}}\User  $user
     * @return \Illuminate\Http\Response
     */
    public function edit(User $user)
    {
        $form = $this->getForm($user);
        return view('{{backLowerNamespace}}.users.edit', compact('user', 'form'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \{{namespace}}\{{modelsFolder}}\User  $user
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, User $user)
    {
        $form = $this->getForm($user);
        $form->redirectIfNotValid();

        $user->update([
            'name'              => $request->get('name'),
            'pseudo'            => $request->get('pseudo'),
            'email'             => $request->get('email'),
        ]);

        flashy('L\' utilisateur a bien été modifié');
        return redirect()->route('{{backLowerNamespace}}.user.index');
    }


    /**
     * Remove the specified resource from storage.
     *
     * @param  \{{namespace}}\{{modelsFolder}}\User  $user
     * @return \Illuminate\Http\Response
     */
    public function destroy(User $user)
    {
        $user->delete();
        flashy('L\' utilisateur a bien été supprimé');

        return redirect()->route('{{backLowerNamespace}}.user.index');
    }

    /**
     * @param Request $request
     * @param User $user
     */
    public function changePassword( Request $request, User  $user ) {

        $validator = Validator::make($request->all(), [
            'password'              => 'required|min:8|confirmed',
            'password_confirmation' => 'required|min:8',
        ]);

        if ( $validator->fails() ) {
            flashy()->error('Erreur lors de la modification des mots de passe.');
            return back()->withErrors($validator)->withInput();
        }

        // update password
        $user->update([
            'password' => bcrypt($request->input('password'))
        ]);

        flashy('Votre mot de passe a été mis à jour');

        return redirect()->route('back.user.index');
    }

}
