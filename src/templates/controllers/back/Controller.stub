<?php

namespace {{namespace}}\Http\Controllers\{{backNamespace}};

use {{namespace}}\{{singularClass}};
use Illuminate\Http\Request;
use {{namespace}}\Http\Controllers\Controller;
use {{namespace}}\Traits\FormBuilderTrait;
use {{namespace}}\Forms\{{backNamespace}}\Reset{{singularClass}}PasswordForm;
use {{namespace}}\Forms\{{backNamespace}}\Create{{singularClass}}Form;
use Kris\LaravelFormBuilder\Form;
use MercurySeries\Flashy\Flashy;

class {{singularClass}}Controller extends Controller
{
    use FormBuilderTrait;

    public function profile({{singularClass}} ${{singularSlug}}) {

      $edit_form = $this->getForm(${{singularSlug}});
      $reset_form = $this->getForm(${{singularSlug}},Reset{{singularClass}}PasswordForm::class);

      return view('{{singularSlug}}.{{pluralSlug}}.show', compact('{{singularSlug}}','edit_form','reset_form'));
    }

    public function index() {
        ${{pluralSlug}} = $this->get{{pluralClass}}();
        return view( '{{singularSlug}}.{{pluralSlug}}.index', compact( '{{pluralSlug}}' ) );
    }

    public function create( ) {
        $form = $this->getForm( new {{singularClass}}, Create{{singularClass}}Form::class );

        return view( '{{singularSlug}}.{{pluralSlug}}.create', compact( 'form' ) );
    }

    public function store( Request $request ) {

        $form = $this->getForm( new {{singularClass}}, Create{{singularClass}}Form::class );

        $form->redirectIfNotValid();

        ${{singularSlug}} = {{singularClass}}::create($request->all());

        flashy('Le compte {{singularSlug}} a été créé avec le succeès');

        return redirect()->route('{{singularSlug}}.profile',${{singularSlug}});

    }

     /**
     * @param Request $request
     * @param {{singularClass}} ${{singularSlug}}
     *
     * @return array
     */
     public function changePassword( Request $request, {{singularClass}} ${{singularSlug}} ) {

        // Validate the form
        $reset_form = $this->getForm(${{singularSlug}},Reset{{singularClass}}PasswordForm::class);

        $this->redirectIfNotValid($reset_form);

            // update password
            ${{singularSlug}}->update([
              'password' => $request->input('new_password')
            ]);

            flashy('Votre mot de passe a été mis à jour');

        return redirect()->route('admin.profile',$admin);
      }

     /**
     * @param Form $form
     */
      private function redirectIfNotValid(Form $form ) {
        if (! $form->isValid() ) {
          Flashy::error('Erreur lors de la modification');
        }
        $form->redirectIfNotValid();
      }

      /**
      * @param Request $request
      * @param {{singularClass}} ${{singularSlug}}
      *
      * @return \Illuminate\Http\RedirectResponse
      */
      public function update(Request $request, {{singularClass}} ${{singularSlug}})
      {

          $form = $this->getForm(${{singularSlug}});

          $this->redirectIfNotValid($form);

          ${{singularSlug}}->update($request->all());

          flashy('Le compte a été modifié avec succès');

          return redirect()->route('admin.profile',$admin);
      }

      public function updateAvatar(Request $request  )
      {
          ${{singularSlug}} = {{singularClass}}::find($request->get('id'));

          ${{singularSlug}}->update([
              'avatar' => $request->get('avatar')
              ]);
          return ${{singularSlug}};
      }

      public function delete( {{singularClass}} ${{singularSlug}}) {

          ${{singularSlug}}->delete();
          flashy('{{singularClass}} a été retiré avec succès');

          return redirect()->route('{{singularSlug}}.index');
      }


      private function get{{pluralClass}}() {
          // The id 1 is for the super super admin used by the web agency
          // his account must be hidden for the others admins
          if (get_admin()->id === 1){
              ${{pluralSlug}} = {{singularClass}}::all();
          }else {
              ${{pluralSlug}} = {{singularClass}}::where('id','!=',1)->get();
          }

          return ${{pluralSlug}};
      }



}
