<?php

namespace {{namespace}};

use {{namespace}}\Notifications\{{singularClass}}\Auth\ResetPassword;
use {{namespace}}\Notifications\{{singularClass}}\Auth\VerifyEmail;
use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Creativeorange\Gravatar\Facades\Gravatar;

class {{singularClass}} extends Authenticatable
{
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password','avatar','is_super_admin'
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'is_super_admin' => 'boolean'
    ];

    /**
     * Send the password reset notification.
     *
     * @param  string  $token
     * @return void
     */
    public function sendPasswordResetNotification($token)
    {
        $this->notify(new ResetPassword($token));
    }

    /**
     * Send the email verification notification.
     *
     * @return void
     */
    public function sendEmailVerificationNotification()
    {
        $this->notify(new VerifyEmail);
    }

    public function isSuperAdmin(  ) :bool
    {
        return  $this->is_super_admin;
    }

    /**
     * Set the avatar with gravatar service before saving and updating
     *
     * @param  mixed $value
     *
     * @return void
     */
    public function setAvatarAttribute($value)
    {
        $this->attributes['avatar'] = is_null($value) ? Gravatar::get($this->attributes['email']) : $value;
    }

    public function setPasswordAttribute($value)
    {
        $this->attributes['password'] = bcrypt($value);
    }

}
